import java.util.*;public class TreeNode {    public static void main(String[] args) {       minChanges(new int[]{0,1,2,3,3,6,5,4},6);    }    public static int maxOperations(String s) {        int times=0;        int n = s.length();        char[] chars = s.toCharArray();        int i=0;        while (i<n-1){            int r=i+1;            if (chars[i]=='1'&&chars[i+1]=='0'){                while (r<n){                    if (chars[r]=='1'){                        times++;                        i=r;                        break;                    }                    r++;                }            }            i++;        }        return times;    }    public static boolean doesAliceWin(String s) {        List list =new ArrayList();        list.add('a');        list.add('e');        list.add('i');        list.add('o');        list.add('u');      int ans =0;        for (int i = 0; i < s.length(); i++) {            char c = s.charAt(i);            if (list.contains(c)){                ans++;            }        }        return  ans>=2?true:false;    }    public static int minChanges(int n, int k) {        if (n==k){            return 0;        }        if (n<k){            return -1;        }        String a = Integer.toBinaryString(n);        String b = Integer.toBinaryString(k);        int al = a.length()-1;        int bl = b.length()-1;        int num=0;        while (al>=0&&bl>=0){            if (a.charAt(al)!=b.charAt(bl)){                if (a.charAt(al)=='0'){                    return -1;                }else {                    num++;                }            }            al--;            bl--;        }        while (al>=0){            if (a.charAt(al)=='1'){                num++;            }            al--;        }        return num;    }    public static int minChanges(int[] nums, int k) {        int n = nums.length;        int[] cnt =new int[k+1];        int[] cnt2 =new int[k+1];        int[] cnt3 =new int[n/2];        for (int i = 0; i < n / 2; i++) {            int p = nums[i];            int q = nums[n - 1 - i];            if (p>q){                int tmp =p;                p=q;                q=tmp;            }            cnt3[i]=q-p;            cnt[q-p]++;            cnt2[Math.max(q,k-p)]++;        }        int ans =n;        int sum=0;        for (int x = 0; x <= k; x++) {           ans=Math.min(ans,n/2-cnt[x]+sum);           sum+=cnt2[x];        }        return ans;    }    public static int minimumLength(String s) {        HashMap<Character,Integer> map =new HashMap<>();        for (int i = 0; i < s.length(); i++) {            char c = s.charAt(i);            map.put(c,map.getOrDefault(c,0)+1);        }        int n = s.length();        for (Character character : map.keySet()) {            Integer times = map.get(character);            while (times>=3){                int i = (times / 3) * 2;                times-=i;                n=n-i;            }        }        return n;    }    public String losingPlayer(int x, int y) {        int flag=0;        while (x>0&&y>=4){            x--;            y-=4;            flag++;        }        return flag%2==0?"Bob":"Alice";    }    public  int pivotIndex(int[] nums) {        int total = Arrays.stream(nums).sum();        int sum = 0;        for (int i = 0; i < nums.length; ++i) {            if (2 * sum + nums[i] == total) {                return i;            }            sum += nums[i];        }        return -1;    }        int val;        TreeNode left;        TreeNode right;        TreeNode() {        }        TreeNode(int val) {            this.val = val;        }        TreeNode(int val, TreeNode left, TreeNode right) {            this.val = val;            this.left = left;            this.right = right;        }}