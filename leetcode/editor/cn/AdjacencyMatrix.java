import java.util.ArrayList;import java.util.List;/** * @author dongjunzhi * @Title: AdjacencyMatrix * @ProjectName LeetCode * @Description: 邻接矩阵实现 * @create 2024/7/27 17:29 */public class AdjacencyMatrix {    List<Integer>  vertex; //顶点    List<List<Integer>> adjMat;    public AdjacencyMatrix(int[] vertices, int[][] edges) {        this.vertex = new ArrayList<>();        this.adjMat = new ArrayList<>();        for (int val : vertices) {            addVertex(val);        }        for (int[] e : edges) {            addEdge(e[0], e[1]);        }    }    /* 获取顶点数量 */    public int size() {        return vertex.size();    }    private void addVertex(int val) {        int n = size();        vertex.add(val);        List<Integer> newRow = new ArrayList<>(n);        for (int j = 0; j < n; j++) {            newRow.add(0);        }        adjMat.add(newRow);        // 在邻接矩阵中添加一列        for (List<Integer> row : adjMat) {            row.add(0);        }    }    /* 删除顶点 */    public void removeVertex(int index) {        if (index >= size())            throw new IndexOutOfBoundsException();        // 在顶点列表中移除索引 index 的顶点        vertex.remove(index);        // 在邻接矩阵中删除索引 index 的行        adjMat.remove(index);        // 在邻接矩阵中删除索引 index 的列        for (List<Integer> row : adjMat) {            row.remove(index);        }    }    /* 添加边 */    // 参数 i, j 对应 vertices 元素索引    public void addEdge(int i, int j) {        // 索引越界与相等处理        if (i < 0 || j < 0 || i >= size() || j >= size() || i == j)            throw new IndexOutOfBoundsException();        // 在无向图中，邻接矩阵关于主对角线对称，即满足 (i, j) == (j, i)        adjMat.get(i).set(j, 1);        adjMat.get(j).set(i, 1);    }    /* 删除边 */    // 参数 i, j 对应 vertices 元素索引    public void removeEdge(int i, int j) {        // 索引越界与相等处理        if (i < 0 || j < 0 || i >= size() || j >= size() || i == j)            throw new IndexOutOfBoundsException();        adjMat.get(i).set(j, 0);        adjMat.get(j).set(i, 0);    }    /* 打印邻接矩阵 */    public void print() {        System.out.print("顶点列表 = ");        System.out.println(vertex);        System.out.println("邻接矩阵 =");        System.out.println(adjMat);    }}