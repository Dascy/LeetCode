import java.util.*;import java.util.concurrent.atomic.AtomicInteger;/** * @author dongjunzhi * @Title: WeeklyCompetition * @ProjectName LeetCode * @Description: 周赛区 * @create 2024/7/7 10:22 */public class WeeklyCompetition {    public static void main(String[] args) {    }    public int nonSpecialCount(int l, int r) {        int cnt=0;        for(int i=2;i<=Math.sqrt(r);i++){            if(i*i<=r&&i*i>=l&&isPrime(i)){                cnt++;            }        }        return r-l+1-cnt;    }    public boolean isPrime(int n){        for(int i=2;i<=Math.sqrt(n);i++){            if(n%i==0) return false;        }        return true;    }    public boolean canAliceWin(int[] nums) {        int two = 0;        int one = 0;        for (int i = 0; i < nums.length; i++) {            if (nums[i] > 9) {                two += nums[i];            } else {                one += nums[i];            }        }        return one == two ? false : true;    }    public static int numberOfSubstrings(String s) {        char[] chars = s.toCharArray();        int zero = 0;        int one = 0;        int num = 0;        for (int i = 0; i < chars.length; i++) {            if (chars[i] == '0') {                zero++;            } else {                one++;            }        }        int t = zero, y = one;        for (int i = 0; i < chars.length; i++) {            if (chars[i] == '0') {                t--;            } else {                y--;            }            if (y >= t * t) {                num++;            }        }        t = zero;        y = one;        for (int i = chars.length - 1; i >= 0; i--) {            if (chars[i] == '0') {                t--;            } else {                y--;            }            if (y >= t * t) {                num++;            }        }        return num;    }    public int numberOfSubmatrices(char[][] grid) {        int n = grid.length;        int m = grid[0].length;        int ans = 0;        int[][][] sum = new int[n + 1][m + 1][2];        for (int i = 0; i < n; i++) {            for (int j = 0; j < m; j++) {                sum[i + 1][j + 1][0] = sum[i + 1][j][0] + sum[i][j + 1][0] - sum[i][j][0];                sum[i + 1][j + 1][1] = sum[i + 1][j][1] + sum[i][j + 1][1] - sum[i][j][1];                if (grid[i][j] != '.') {                    sum[i + 1][j + 1][grid[i][j] & 1] += 1;                }                if (sum[i + 1][j + 1][0] > 0 && sum[i + 1][j + 1][0] == sum[i + 1][j + 1][1]) {                    ans++;                }            }        }        return ans;    }    public String getEncryptedString(String s, int k) {        int n = s.length();        char[] chars = new char[n + k];        for (int i = 0; i < n + k; i++) {            if (i >= n) {                chars[i] = s.charAt(i % n);            } else {                chars[i] = s.charAt(i);            }        }        char[] array = s.toCharArray();        for (int i = 0; i < array.length; i++) {            array[i] = chars[i + k];        }        return new String(array);    }}